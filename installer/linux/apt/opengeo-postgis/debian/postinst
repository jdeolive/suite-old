#!/bin/bash
# postinst script for geonode
#
# see: dh_installdeb(1)

. /usr/share/debconf/confmodule

set -e

# summary of how this script can be called:
#	* <postinst> `configure' <most-recently-configured-version>
#	* <old-postinst> `abort-upgrade' <new version>
#	* <conflictor's-postinst> `abort-remove' `in-favour' <package>
#	  <new-version>
#	* <postinst> `abort-remove'
#	* <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#	  <failed-install-package> <version> `removing'
#	  <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


#pg_run <cmd> [password]
function pg_run() {
  su - postgres -c "PGPASSWORD=$2 $1" > /dev/null
}

#pg_run_wout <cmd> [password]
function pg_run_wout() {
  su - postgres -c "PGPASSWORD=$2 $1" 
}

#pg_check_access [password]
function pg_check_access() {
  pg_run "psql -w -l" $1 
}

#pg_check_db <database> [password]
function pg_check_db() {
  pg_run "psql -w -d $1 -c \"select version()\"" $2  
}

#pg_configure [password]
function configure_postgres() {

  set +e 

  # Adds PgAdmin utilities to the 'postgres' database
  if [ $( pg_run_wout "psql -w -c \"select count(*) from pg_proc where proname = 'pg_logdir_ls'\"" $1 | head -n 3 | tail -n 1 | sed 's/ *//g' ) == "0" ]; then
    pg_run "psql -w -f /usr/share/postgresql/8.4/contrib/adminpack.sql -d postgres" $1
    db_set opengeo_postgis/install_adminpack true
  else
    db_set opengeo_postgis/install_adminpack false
  fi

  # create template_postgis database
  pg_run "psql -w -d template_postgis -c \"select postgis_version()\"" $1  
  if [ "$?" != "0" ]; then  
     pg_run "createdb -w template_postgis" $1
     pg_run "createlang -w plpgsql template_postgis" $1
     pg_run "psql -w -d template_postgis -f /usr/share/postgresql/8.4/contrib/postgis-1.5/postgis.sql" $1
     pg_run "psql -w -d template_postgis -f /usr/share/postgresql/8.4/contrib/postgis-1.5/spatial_ref_sys.sql" $1
     pg_run "psql -w -d template_postgis -c \"update pg_database set datistemplate = true where datname = 'template_postgis'\"" $1

     db_set opengeo_postgis/install_template_postgis true
  else
     db_set opengeo_postgis/install_template_postgis false
  fi

  # Create an 'opengeo' user
  pg_run "createuser -w --createdb --superuser opengeo" $1
  if [ "$?" == "0" ]; then
    # Set the user password
    pg_run "psql -w -d postgres -c \"alter user opengeo password 'opengeo'\"" $1

    # update pg_hba.conf
    PG_HBA=/etc/postgresql/8.4/main/pg_hba.conf
    if [ -e $PG_HBA ]; then
	  if [ ! `cat /etc/postgresql/8.4/main/pg_hba.conf|grep opengeo|wc -l` ]
      then 
        cp $PG_HBA $PG_HBA.orig
        sed -i '/# TYPE/a local   all         opengeo                           md5'  $PG_HBA
      fi
	fi
     
    db_set opengeo_postgis/create_opengeo_user true
  else
    db_set opengeo_postgis/create_opengeo_user false
  fi

  db_get opengeo_postgis/install_demo_db
  INSTALL_DEMO_DB=$RET

  db_get opengeo_postgis/install_geoserver_db
  INSTALL_GEOSERVER_DB=$RET

  if [ "$INSTALL_DEMO_DB" == "true" ]; then
    # create demo database
    pg_check_db medford $1
    if [ "$?" != "0" ]; then
      pg_run "createdb -w --owner=opengeo --template=template_postgis medford" $1
      # Add the data
      pg_run "psql -w -f /usr/share/opengeo-postgis/medford_taxlots_schema.sql -d medford" $1
      pg_run "psql -w -f /usr/share/opengeo-postgis/medford_taxlots.sql -d medford" $1
    else
      db_set opengeo_postgis/install_demo_db false
    fi
  fi

  if [ "$INSTALL_GEOSERVER_DB" == "true" ]; then
    # create geoserver database
    pg_check_db geoserver $1
    if [ "$?" != "0" ]; then
      pg_run "createdb -w --owner=opengeo --template=template_postgis geoserver" $1
    else
      db_set opengeo_postgis/install_geoserver_db false
    fi
  fi
}


case "$1" in
    configure)
      db_get opengeo_postgis/configure_postgis      
      if [ "$RET" == "true" ]; then

        # while checking password statements will fail so set +e
        set +e
        pg_check_access
        if [ "$?" != "0" ]; then
          db_input high opengeo_postgis/postgres_password || true
          db_go
          db_get opengeo_postgis/postgres_password
          PGPASSWORD=$RET
      
          while [ 1 ]; do
            pg_check_access $PGPASSWORD 
            if [ "$?" == "0" ]; then
              db_set opengeo_postgis/postgres_password $PGPASSWORD
              break
            fi
      
            db_input high opengeo_postgis/postgres_password_bad || true
            db_go
            db_get opengeo_postgis/postgres_password_bad
            PGPASSWORD=$RET
      
            if [ -z "$PGPASSWORD" ]; then
              ABORT=yes
              break
            fi
          done
        fi
        set -e
       
        if [ "$ABORT" == "yes" ]; then
          db_set opengeo_postgis/configure_postgis false
        else
          configure_postgres $PGPASSWORD
        fi
      fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
	echo "postinst called with unknown argument \`$1'" >&2
	exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

db_stop;

exit 0
